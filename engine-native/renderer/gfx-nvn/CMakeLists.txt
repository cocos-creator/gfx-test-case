set(TARGET_NAME GFXNVN)

set(CURRENT_DIR ${COCOS_SRC_PATH}/renderer/gfx-nvn)

file(GLOB_RECURSE HEADER_FILES ${CURRENT_DIR}/*.h)
file(GLOB_RECURSE SOURCE_CPP_FILES ${CURRENT_DIR}/*.cpp ${CURRENT_DIR}/*.cc)
file(GLOB_RECURSE SOURCE_C_FILES ${CURRENT_DIR}/*.c)

set(ALL_FILES
  ${HEADER_FILES}
  ${SOURCE_CPP_FILES}
  ${SOURCE_C_FILES}
)

include_directories(
  $ENV{NINTENDO_SDK_ROOT}/Include
  $ENV{NINTENDO_SDK_ROOT}/Common/Configs/Targets/${NN_SDK_PLATFORM_FOLDER}/Include
)

add_library(NN_SDK STATIC IMPORTED GLOBAL)
set_target_properties(NN_SDK PROPERTIES
  IMPORTED_LOCATION_DEBUG $ENV{NINTENDO_SDK_ROOT}/Libraries/${NN_SDK_PLATFORM_FOLDER}/Debug/libnnSdk.lib
  IMPORTED_LOCATION_RELEASE $ENV{NINTENDO_SDK_ROOT}/Libraries/${NN_SDK_PLATFORM_FOLDER}/Release/libnnSdk.lib
)

add_library(NN_SDK_DIAG STATIC IMPORTED GLOBAL)
set_target_properties(NN_SDK_DIAG PROPERTIES
  IMPORTED_LOCATION_DEBUG $ENV{NINTENDO_SDK_ROOT}/Libraries/${NN_SDK_PLATFORM_FOLDER}/Debug/libnn_diagTextPublicEn.lib
  IMPORTED_LOCATION_RELEASE $ENV{NINTENDO_SDK_ROOT}/Libraries/${NN_SDK_PLATFORM_FOLDER}/Release/libnn_diagTextPublicEn.lib
)

add_library(NVN_LOADER STATIC IMPORTED GLOBAL)
set_target_properties(NVN_LOADER PROPERTIES
  IMPORTED_LOCATION $ENV{NINTENDO_SDK_ROOT}/Tools/Graphics/NvnLoader/nvn.lib
)
set(GFX_DEPENDENT_DLLS $ENV{NINTENDO_SDK_ROOT}/Tools/Graphics/NvnLoader/nvn.dll)

if(COCOS_UNICODE)
	add_definitions("-DUNICODE -D_UNICODE")
endif()

if (COCOS_STATIC)
	add_library(${TARGET_NAME} STATIC ${HEADER_FILES} ${ALL_FILES})
else()
	add_library(${TARGET_NAME} SHARED ${HEADER_FILES} ${ALL_FILES})
endif()

target_link_libraries(${TARGET_NAME} Core GFXBase NN_SDK NN_SDK_DIAG NVN_LOADER)
target_compile_definitions(${TARGET_NAME} PRIVATE ${CC_EXTERNAL_PRIVATE_DEFINITIONS})

set_target_properties(${TARGET_NAME} PROPERTIES OUTPUT_NAME CCGFXNVN)
set_target_properties(${TARGET_NAME} PROPERTIES OUTPUT_NAME_DEBUG CCGFXNVN_d)

use_precompiled_header("${CMAKE_CURRENT_SOURCE_DIR}/NVNStd.h" "${CMAKE_CURRENT_SOURCE_DIR}/NVNStd.cpp" SOURCE_CPP_FILES)

message(STATUS "${TARGET_NAME} configuration completed.")

target_compile_definitions(${TARGET_NAME} PUBLIC
  $<$<CONFIG:Debug>:CC_DEBUG=1>
)
